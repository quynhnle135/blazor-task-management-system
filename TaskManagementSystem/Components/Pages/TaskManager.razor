@page "/tasks"
@rendermode InteractiveServer

<h1 style="color: red;">Task Management System</h1>

<button @onclick="SortByPriority">Sort by Priority</button>
<button @onclick="SortByStatus">Sort by Status</button>

<EditForm Model="@newTodo" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div>
        <label for="title">Title:</label>
        <InputText @bind-Value="newTodo.Title"/>
    </div>

    <div>
        <label for="description">Description:</label>
        <InputText @bind-Value="newTodo.Description"/>
    </div>

    <div>
        <label for="status">Status</label>
        <InputSelect @bind-Value="newTodo.Status">
            <option value="ToDo">ToDo</option>
            <option value="InProgress">InProgress</option>
            <option value="Done">Done</option>
        </InputSelect>
    </div>

    <div>
        <label for="priority">Prioirty</label>
        <InputSelect @bind-Value="newTodo.Priority">
            <option value="Low">Low</option>
            <option value="Medium">Medium</option>
            <option value="High">High</option>
        </InputSelect>
    </div>
    <button style="border: none; border-radius: 5px; background-color: red; color: white;" type="submit">Add</button>
</EditForm>

<!--Display output-->

<h3>You have @todos.Count(t => t.Status == global::TodoStatus.ToDo ||  t.Status == global::TodoStatus.InProgress) task(s) to complete.</h3>
<ul>
     @foreach (var todo in todos) {
        <li style="list-style-type: none;">
            @if(todo.Status == global::TodoStatus.Done) {
                <span style="text-decoration: line-through; color: green;">@todo.Title</span>
            } else if (todo.Status == global::TodoStatus.InProgress || todo.Status == global::TodoStatus.ToDo) {
                <input type="checkbox" @onclick="() => MarkAsDone(todo)"/>
                <span style="color: @(todo.Status == global::TodoStatus.InProgress ? "orange" : "red");">@todo.Title</span>
            }
            
            <button style="color: red; border: none; border-radius: 5px;" @onclick="() => DeleteTask(todo)">Delete</button>

        </li>        
    } 
</ul>

@code {
    private Todo newTodo = new Todo();
    private List<Todo> todos = new();

    private void HandleValidSubmit() {
        todos.Add(new Todo {
            Title = newTodo.Title,
            Description = newTodo.Description, 
            Priority=newTodo.Priority, 
            Status=newTodo.Status
        });
    }

    private void DeleteTask(Todo todo) {
        todos.Remove(todo);
    }
    private void MarkAsDone(Todo todo) {
        todo.Status = global::TodoStatus.Done;
    }
    
    private void SortByStatus() {
        // Status (ToDo, InProgress, Done) -> Sort by Alphabetical order.
        // tasks = tasks.OrderBy(t => t.Status).ToList();

        todos = todos.OrderBy(t => GetStatusValue(t.Status)).ToList();
    }

    
    private void SortByPriority() {
        // Priority (Low, Medium, High) -> Sort by Alphabetical order.
        // tasks = tasks.OrderByDescending(t => t.Priority).ToList();

        todos = todos.OrderByDescending(t => GetPriorityValue(t.Priority)).ToList();
    }

    private int GetStatusValue(TodoStatus status) {
        return status switch {
            TodoStatus.Done => 3,
            TodoStatus.InProgress => 2,
            TodoStatus.ToDo => 1,
            _ => 0 // Default case
        };
    }

    private int GetPriorityValue(TodoPriority priority) {
        return priority switch {
            TodoPriority.High => 3,
            TodoPriority.Medium => 2,
            TodoPriority.Low => 1,
            _ => 0
        };
    }
}